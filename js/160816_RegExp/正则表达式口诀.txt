正则表达式口诀

     非常不错的口诀，相信学习正则的朋友感觉入门很难，其实并不是想象中的难，你看下面不知道是哪位高手整理的口诀，看口诀就知道此人对正则的熟练程度非常高了。

正则是每个程序员绕不开的堡垒，只有把它攻下来。我觉得正则之所以难，第一难是需要记忆，第二难是要求具备抽象逻辑思维。 
签于网上太多的介绍都是一篇凶悍的短文，边看边理解可以，帮助记忆不行。又受五笔字型字根表口诀“白手看头三二斤...”的启发， 
试作“正则表达式助记口诀”又名“正则打油诗”，版本0.1，绝对原创，仿冒必究，：） 
注：本文仅为学习正则时为了便于记忆而作，不能代替系统而全面的学习过程，错漏之处，敬请指正！ 





正则其实也势利，削尖头来把钱揣； （指开始符号^和结尾符号$） 
特殊符号认不了，弄个倒杠来引路； （指\. \* \- \+ \?等特殊符号转义） 
倒杠后面跟小w， 数字字母下划线；        \w等价于[0-9a-zA-Z_] (word)
倒杠后面跟小d， 只有数字来表示；        \d等价于[0-9] (digit)
倒杠后面跟小a， 报警符号嘀一声；  
倒杠后面跟小b， 单词分界或退格； 
倒杠后面r s t， 回车空白制表符；            \s等价于[\n\r\t\v\f] (return,space,table,newline...)      
小写跟罢跟大写，多得实在不得了； 
倒杠后面跟大W， 字母数字靠边站；       \W等价于[^0-9a-zA-Z_] 
倒杠后面跟大S， 空白也就靠边站； 
倒杠后面跟大D， 数字从此靠边站；      \D等价于[^0-9]
倒框后面跟大B， 不含开头和结尾； 

单个字符要重复，三个符号来帮忙； （* + ？） 					// 贪婪匹配问星加，0次1次到多次；（？表0-1;*表0-n;+表1-n次重复）//再加问号不贪婪    ??、*?、+?、{n,m}？														
0 星加1 到无穷，问号只管0 和1； （*表0-n;+表1-n;?表0-1次重复） 
花括号里学问多，重复操作能力强； （{n} {n,} {n,m}：{最小个数,最大个数}） 
若要重复字符串，圆括把它括起来； 	    用圆括号分组：(abc){3}表示字符串“abc”重复3次;(abc)?表示字符串“abc”重复0或1次;

特殊集合自定义，中括号来帮你忙；    //[]:中括号里面的字符：多选一（有且只匹配一个）。
转义符号行不通，一个一个来排队； 
实在多得排不下，横杠请来帮个忙；  //（[a-zA-Z0-9]）    汉字的范围：[\u4e00-\u9fa5]
尖头放进中括号，反义定义威力大； （[^a]指除“a”外的任意字符，^必须放最前头，放其他位置就当做普通字符 ） 
1竖作用可不小，两边正则互替换； （键盘上与“\”是同一个键） 
1竖能用很多次，复杂定义很方便； 
园括号，用途多； 
反向引用指定组，数字排符对应它； （“\b(\w+)\b\s+\1\b”中的数字“1”引用前面的“(\w+)”） 
支持组名自定义，问号加上尖括号； （“(?<Word>\w+)”中把“\w+”定义为组，组名为“Word”） 
园括号，用途多，位置指定全靠它； 
问号等号字符串，定位字符串前面； （“\b\w+(?=ing\b)”定位“ing”前面的字符串） 
若要定位串后面，中间插个小于号； （“(?<=\bsub)\w+\b”定位“sub”后面的字符串） 
问号加个惊叹号，后面跟串字符串； 
PHPer都知道， ！是取反的意思； 
后面不跟这一串，统统符合来报到； （“\w*d(?!og)\w*”，“dog”不符合，“do”符合） 
问号小于惊叹号，后面跟串字符串； 
前面不放这一串，统统符合来报到； 
点号星号很贪婪，加个问号不贪婪； 
加号问号有保底，至少重复一次多； 
两个问号老规矩，0次1次团团转； 
花括号后跟个？，贪婪变成不贪婪； 
还有很多装不下，等着以后来增加。 
一些常用的正则表达式 
"^\d+$"　　//非负整数（正整数 + 0） 
"^[0-9]*[1-9][0-9]*$"　　//正整数 
"^((-\d+)|(0+))$"　　//非正整数（负整数 + 0） 
"^-[0-9]*[1-9][0-9]*$"　　//负整数 
"^-?\d+$"　　　　//整数 
"^\d+(\.\d+)?$"　　//非负浮点数（正浮点数 + 0） 
"^(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*))$"　　//正浮点数 
"^((-\d+(\.\d+)?)|(0+(\.0+)?))$"　　//非正浮点数（负浮点数 + 0） 
"^(-(([0-9]+\.[0-9]*[1-9][0-9]*)|([0-9]*[1-9][0-9]*\.[0-9]+)|([0-9]*[1-9][0-9]*)))$"　　//负浮点数 
"^(-?\d+)(\.\d+)?$"　　//浮点数 
"^[A-Za-z]+$"　　//由26个英文字母组成的字符串 
"^[A-Z]+$"　　//由26个英文字母的大写组成的字符串 
"^[a-z]+$"　　//由26个英文字母的小写组成的字符串 
"^[A-Za-z0-9]+$"　　//由数字和26个英文字母组成的字符串 
"^\w+$"　　//由数字、26个英文字母或者下划线组成的字符串 
"^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$"　　　　//email地址 
"^[a-zA-z]+://(\w+(-\w+)*)(\.(\w+(-\w+)*))*(\?\S*)?$"　　//url 
/^(d{2}|d{4})-((0([1-9]{1}))|(1[1|2]))-(([0-2]([1-9]{1}))|(3[0|1]))$/ // 年-月-日 
/^((0([1-9]{1}))|(1[1|2]))/(([0-2]([1-9]{1}))|(3[0|1]))/(d{2}|d{4})$/ // 月/日/年 
"^([w-.]+)@(([[0-9]{1,3}.[0-9]{1,3}.[0-9]{1,3}.)|(([w-]+.)+))([a-zA-Z]{2,4}|[0-9]{1,3})(]?)$" //Emil 
"(d+-)?(d{4}-?d{7}|d{3}-?d{8}|^d{7,8})(-d+)?" //电话号码 
"^(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5]).(d{1,2}|1dd|2[0-4]d|25[0-5])$" //IP地址 
匹配中文字符的正则表达式： [\u4e00-\u9fa5] 
匹配双字节字符(包括汉字在内)：[^\x00-\xff] 
匹配空行的正则表达式：\n[\s| ]*\r 
匹配HTML标记的正则表达式：/<(.*)>.*<\/\1>|<(.*) \/>/ 
匹配首尾空格的正则表达式：(^\s*)|(\s*$) 
匹配Email地址的正则表达式：\w+([-+.]\w+)*@\w+([-.]\w+)*\.\w+([-.]\w+)* 
匹配网址URL的正则表达式：^[a-zA-z]+://(://w+(-//w+)*)(//.(//w+(-//w+)*))*(//?\\S*)?$ 
匹配帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线)：^[a-zA-Z][a-zA-Z0-9_]{4,15}$ 
匹配国内电话号码：(\d{3}-|\d{4}-)?(\d{8}|\d{7})? 
匹配腾讯QQ号：^[1-9]*[1-9][0-9]*$ 
验证身份证：\d{15}(\d{2}[0-9xX])?


G：看完了口诀，里边总计的内容很多。但关于命名组的示例是错的，还有环视的描述是不准确的，环视不占有字符，是进行位置的匹配，在某个点进行前窥后探。